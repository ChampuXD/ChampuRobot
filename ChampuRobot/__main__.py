import importlib
import re
import random
import time
import asyncio
from platform import python_version as y
from sys import argv
from pyrogram import __version__ as pyrover
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram import __version__ as telever
from telegram.error import (
    BadRequest,
    ChatMigrated,
    NetworkError,
    TelegramError,
    TimedOut,
    Unauthorized,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    Filters,
    MessageHandler,
)
from telegram.ext.dispatcher import DispatcherHandlerStop
from telegram.utils.helpers import escape_markdown
from telethon import __version__ as tlhver


import ChampuRobot.modules.no_sql.users_db as sql
from ChampuRobot import (
    BOT_NAME,
    BOT_USERNAME,
    LOGGER,
    OWNER_ID,
    START_IMG,
    SUPPORT_CHAT,
    TOKEN,
    StartTime,
    dispatcher,
    function,    
    app,
    telethn,
    updater,
)
from ChampuRobot.modules import ALL_MODULES
from ChampuRobot.modules.helper_funcs.chat_status import is_user_admin
from ChampuRobot.modules.helper_funcs.misc import paginate_modules


def get_readable_time(seconds: int) -> str:
    count = 0
    ping_time = ""
    time_list = []
    time_suffix_list = ["s", "m", "h", "days"]

    while count < 4:
        count += 1
        remainder, result = divmod(seconds, 60) if count < 3 else divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        ping_time += time_list.pop() + ", "

    time_list.reverse()
    ping_time += ":".join(time_list)

    return ping_time


PM_START_TEXT = """ 
* ú·¥á è* {} , ü•Ä  
*·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä ·¥ú ü·¥õ…™·¥ç·¥Ä·¥õ·¥á …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ ·¥Äss…™s·¥õ·¥Ä…¥·¥õ!*  
* ú…™·¥õ  ú·¥á ü·¥ò ·¥õ·¥è ·¥áx·¥ò ü·¥è Ä·¥á ·¥ç è “ì·¥ú ü ü ·¥ò·¥è·¥õ·¥á…¥·¥õ…™·¥Ä ü!*  
‚ûª *·¥õ ú·¥á ·¥ç·¥ès·¥õ ·¥ò·¥è·¥°·¥á Ä“ì·¥ú ü ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ + ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ ·¥°…™·¥õ ú ·¥Ä·¥°·¥ás·¥è·¥ç·¥á ·¥Ä…¥·¥Ö ·¥ús·¥á“ì·¥ú ü “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás.*  

 ü·¥á·¥õ's ·¥ç·¥Ä·¥ã·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ ·¥áx·¥ò·¥á Ä…™·¥á…¥·¥Ñ·¥á ·¥áx·¥õ Ä·¥Ä·¥è Ä·¥Ö…™…¥·¥Ä Ä è! üöÄ
"""

buttons = [
    [
        InlineKeyboardButton(
            text="A·¥Ö·¥Ö M·¥á ·¥õ·¥è Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò",
            url=f"https://t.me/{dispatcher.bot.username}?startgroup=true",
        ),
    ],
    [
        InlineKeyboardButton(text=" ú·¥á ü·¥ò ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="Main_help"),
    ],
    [
        InlineKeyboardButton(text="·¥è…¥·¥°·¥á Ä", url=f"tg://user?id={OWNER_ID}"),
    ],  
    [
        InlineKeyboardButton(text="s·¥ú·¥©·¥©·¥è Ä·¥õ", callback_data="Champu_support"),
        InlineKeyboardButton(text="·¥Ñ ú·¥Ä·¥ç·¥ò·¥ú", url=f"https://t.me/TheChampu"),
    ],   
    

]

HELP_STRINGS = f"""
¬ª *{BOT_NAME}  ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü ü·¥è·¥° ·¥õ·¥è …¢·¥á·¥õ ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ s·¥ò·¥á·¥Ñ…™“ì…™·¥Ñs ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*"""

DONATE_STRING = f""" ú·¥á è  ô·¥Ä ô è,
   ú·¥Ä·¥©·¥© è ·¥õ·¥è  ú·¥á·¥Ä Ä ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä ·¥Ö·¥è…¥·¥Ä·¥õ·¥á.

 è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ü è ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä @itsMeShivanshu “ì·¥è Ä ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ ·¥è Ä  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ö…™ Ä·¥á·¥Ñ·¥õ è ·¥Ö·¥è…¥·¥Ä·¥õ·¥á ·¥è…¥ ·¥ú·¥ò…™ Champu@Upi."""

IMPORTED = {}
MIGRATEABLE = []
HELPABLE = {}
STATS = []
USER_INFO = []
DATA_IMPORT = []
DATA_EXPORT = []
CHAT_SETTINGS = {}
USER_SETTINGS = {}

for module_name in ALL_MODULES:
    imported_module = importlib.import_module("ChampuRobot.modules." + module_name)
    if not hasattr(imported_module, "__mod_name__"):
        imported_module.__mod_name__ = imported_module.__name__

    if imported_module.__mod_name__.lower() not in IMPORTED:
        IMPORTED[imported_module.__mod_name__.lower()] = imported_module
    else:
        raise Exception("Can't have two modules with the same name! Please change one")

    if hasattr(imported_module, "__help__") and imported_module.__help__:
        HELPABLE[imported_module.__mod_name__.lower()] = imported_module

    # Chats to migrate on chat_migrated events
    if hasattr(imported_module, "__migrate__"):
        MIGRATEABLE.append(imported_module)

    if hasattr(imported_module, "__stats__"):
        STATS.append(imported_module)

    if hasattr(imported_module, "__user_info__"):
        USER_INFO.append(imported_module)

    if hasattr(imported_module, "__import_data__"):
        DATA_IMPORT.append(imported_module)

    if hasattr(imported_module, "__export_data__"):
        DATA_EXPORT.append(imported_module)

    if hasattr(imported_module, "__chat_settings__"):
        CHAT_SETTINGS[imported_module.__mod_name__.lower()] = imported_module

    if hasattr(imported_module, "__user_settings__"):
        USER_SETTINGS[imported_module.__mod_name__.lower()] = imported_module


# do not async
def send_help(chat_id, text, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    dispatcher.bot.send_video(
        chat_id=chat_id,
        video=START_IMG,
        caption=text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard,
    )

def start(update: Update, context: CallbackContext):
    args = context.args
    global uptime
    uptime = get_readable_time((time.time() - StartTime))
    if update.effective_chat.type == "private":
        if len(args) >= 1:
            if args[0].lower() == "help":
                send_help(update.effective_chat.id, HELP_STRINGS)
            elif args[0].lower().startswith("ghelp_"):
                mod = args[0].lower().split("_", 1)[1]
                if not HELPABLE.get(mod, False):
                    return
                send_help(
                    update.effective_chat.id,
                    HELPABLE[mod].__help__,
                    InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back")]]
                    ),
                )
            elif args[0].lower() == "markdownhelp":
                IMPORTED["ex·¥õ Ä·¥Äs"].markdown_help_sender(update)
            elif args[0].lower().startswith("stngs_"):
                match = re.match("stngs_(.*)", args[0].lower())
                chat = dispatcher.bot.getChat(match.group(1))

                if is_user_admin(chat, update.effective_user.id):
                    send_settings(match.group(1), update.effective_user.id, False)
                else:
                    send_settings(match.group(1), update.effective_user.id, True)

            elif args[0][1:].isdigit() and "r·¥ú ü·¥ás" in IMPORTED:
                IMPORTED["r·¥ú ü·¥ás"].send_rules(update, args[0], from_pm=True)
        else:
            first_name = update.effective_user.first_name
            
            x=update.effective_message.reply_sticker(
                "CAACAgUAAx0CVNLrfQACa95mX0x-Phb26tTn31diGm1qkxSKMQACgQcAAi3ziFYjLoU116oybR4E")
            x.delete()
            usr = update.effective_user
            lol = update.effective_message.reply_text(
                PM_START_TEXT.format(usr.first_name), parse_mode=ParseMode.MARKDOWN
            )
            time.sleep(0.4)
            lol.edit_text("‚ù§")
            time.sleep(0.5)
            lol.edit_text("‚ö°")
            time.sleep(0.3)
            lol.edit_text("Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢... ")
            time.sleep(0.4)
            lol.delete()
            
            update.effective_message.reply_photo(START_IMG,PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME,sql.num_users(),sql.num_chats()),
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
            )
    else:
        update.effective_message.reply_photo(
            START_IMG,
            caption="…™ ·¥Ä·¥ç ·¥Ä ü…™·¥†·¥á  ô·¥Ä ô è  !\n<b>…™ ·¥Ö…™·¥Ö…¥'·¥õ s ü·¥á·¥ò·¥õ s…™…¥·¥Ñ·¥á‚Äã:</b> <code>{}</code>".format(
                uptime
            ),
            parse_mode=ParseMode.HTML,
        )

def error_handler(update, context):
    """Log the error and send a telegram message to notify the developer."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    LOGGER.error(msg="Exception while handling an update:", exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__
    )
    tb = "".join(tb_list)

    # Build the message with some markup and additional information about what happened.
    message = (
        "An exception was raised while handling an update\n"
        "<pre>update = {}</pre>\n\n"
        "<pre>{}</pre>"
    ).format(
        html.escape(json.dumps(update.to_dict(), indent=2, ensure_ascii=False)),
        html.escape(tb),
    )

    if len(message) >= 4096:
        message = message[:4096]
    # Finally, send the message
    context.bot.send_message(chat_id=OWNER_ID, text=message, parse_mode=ParseMode.HTML)


# for test purposes
def error_callback(update: Update, context: CallbackContext):
    error = context.error
    try:
        raise error
    except Unauthorized:
        print("no nono1")
        print(error)
        # remove update.message.chat_id from conversation list
    except BadRequest:
        print("no nono2")
        print("BadRequest caught")
        print(error)

        # handle malformed requests - read more below!
    except TimedOut:
        print("no nono3")
        # handle slow connection problems
    except NetworkError:
        print("no nono4")
        # handle other connection problems
    except ChatMigrated as err:
        print("no nono5")
        print(err)
        # the chat_id of a group has changed, use e.new_chat_id instead
    except TelegramError:
        print(error)
        # handle all other telegram related errors


def help_button(update, context):
    query = update.callback_query
    mod_match = re.match(r"help_module\((.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back", query.data)

    print(query.message.chat.id)

    try:
        if mod_match:
            module = mod_match.group(1)
            text = (
                "¬ª *·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös Íú∞·¥è Ä‚Äã‚Äã* *{}* :\n".format(
                    HELPABLE[module].__mod_name__
                )
                + HELPABLE[module].__help__
            )
            query.message.edit_caption(text,
                parse_mode=ParseMode.MARKDOWN,
                
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help_back"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")]]
                ),
            )

        elif prev_match:
            curr_page = int(prev_match.group(1))
            query.message.edit_caption(HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(curr_page - 1, HELPABLE, "help")
                ),
            )

        elif next_match:
            next_page = int(next_match.group(1))
            query.message.edit_caption(HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(next_page + 1, HELPABLE, "help")
                ),
            )

        elif back_match:
            query.message.edit_caption(HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, HELPABLE, "help")
                ),
            )

        # ensure no spinny white circle
        context.bot.answer_callback_query(query.id)
        # query.message.delete()

    except BadRequest:
        pass


def Champu_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "Champu_":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_caption(f"* ú·¥á è,*ü•Ä\n  *·¥õ ú…™s …™s {dispatcher.bot.first_name}*"
            "\n*·¥Ä ·¥ò·¥è·¥°·¥á ÄÍú∞·¥ú ü …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ ‚ûï ·¥ç·¥ús…™·¥Ñ ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥ú…™ ü·¥õ ·¥õ·¥è  ú·¥á ü·¥ò  è·¥è·¥ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥á·¥ÄÍú±…™ ü è ·¥Ä…¥·¥Ö ·¥õ·¥è ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò Íú∞ Ä·¥è·¥ç Íú±·¥Ñ·¥Ä·¥ç·¥ç·¥á ÄÍú± ·¥Ä…¥·¥Ö Íú±·¥ò·¥Ä·¥ç·¥ç·¥á ÄÍú±.*"
            "\n*·¥° Ä…™·¥õ·¥õ·¥á…¥ …™…¥ ·¥© è·¥õ ú·¥è…¥ ·¥°…™·¥õ ú s«´ ü·¥Ä ü·¥Ñ ú·¥á·¥ç è ·¥Ä…¥·¥Ö ·¥ç·¥è…¥…¢·¥è·¥Ö ô ·¥Äs ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.*"
            "\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            f"\n*‚ûª ·¥ú·¥©·¥õ…™·¥ç·¥á ¬ª* {uptime}"
            f"\n*‚ûª ·¥ús·¥á Äs ¬ª* {sql.num_users()}"
            f"\n*‚ûª ·¥Ñ ú·¥Ä·¥õs ¬ª* {sql.num_chats()}"
            "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            "\n\n‚û≤  …™ ·¥Ñ·¥Ä…¥  Ä·¥áÍú±·¥õ Ä…™·¥Ñ·¥õ ·¥úÍú±·¥á ÄÍú±."
            "\n‚û≤  …™  ú·¥Ä·¥†·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥Ä…¥·¥õ…™-Íú∞ ü·¥è·¥è·¥Ö Íú± èÍú±·¥õ·¥á·¥ç."
            "\n‚û≤  …™ ·¥Ñ·¥Ä…¥ …¢ Ä·¥á·¥á·¥õ ·¥úÍú±·¥á ÄÍú± ·¥°…™·¥õ ú ·¥Ñ·¥úÍú±·¥õ·¥è·¥ç…™·¥¢·¥Ä ô ü·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú± ·¥Ä…¥·¥Ö ·¥á·¥†·¥á…¥ Íú±·¥á·¥õ ·¥Ä …¢ Ä·¥è·¥ú·¥ò'Íú±  Ä·¥ú ü·¥áÍú±."
            "\n‚û≤  …™ ·¥Ñ·¥Ä…¥ ·¥°·¥Ä Ä…¥ ·¥úÍú±·¥á ÄÍú± ·¥ú…¥·¥õ…™ ü ·¥õ ú·¥á è  Ä·¥á·¥Ä·¥Ñ ú ·¥ç·¥Äx ·¥°·¥Ä Ä…¥Íú±, ·¥°…™·¥õ ú ·¥á·¥Ä·¥Ñ ú ·¥ò Ä·¥á·¥Ö·¥áÍú∞…™…¥·¥á·¥Ö ·¥Ä·¥Ñ·¥õ…™·¥è…¥Íú± Íú±·¥ú·¥Ñ ú ·¥ÄÍú±  ô·¥Ä…¥, ·¥ç·¥ú·¥õ·¥á, ·¥ã…™·¥Ñ·¥ã, ·¥á·¥õ·¥Ñ."
            "\n‚û≤  …™  ú·¥Ä·¥†·¥á ·¥Ä …¥·¥è·¥õ·¥á ·¥ã·¥á·¥á·¥ò…™…¥…¢ Íú± èÍú±·¥õ·¥á·¥ç,  ô ü·¥Ä·¥Ñ·¥ã ü…™Íú±·¥õÍú±, ·¥Ä…¥·¥Ö ·¥á·¥†·¥á…¥ ·¥ò Ä·¥á·¥Ö·¥á·¥õ·¥á Ä·¥ç…™…¥·¥á·¥Ö  Ä·¥á·¥ò ü…™·¥áÍú± ·¥è…¥ ·¥Ñ·¥á Ä·¥õ·¥Ä…™…¥ ·¥ã·¥á è·¥°·¥è Ä·¥ÖÍú±."
            f"\n\n‚ûª ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥° “ì·¥è Ä …¢·¥á·¥õ·¥õ…™…¥…¢  ô·¥Äs…™·¥Ñ  ú·¥á ü·¥© ·¥Ä…¥·¥Ö …™…¥“ì·¥è ·¥Ä ô·¥è·¥ú·¥õ {dispatcher.bot.first_name}.",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="s·¥ú·¥©·¥©·¥è Ä·¥õ", callback_data="Champu_support"
                        ),
                        InlineKeyboardButton(
                            text="·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="Main_help"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä", url=f"tg://user?id={OWNER_ID}"
                        ),
                    ],
                    [
                        InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="Champu_back"),
                    ],
                ]
            ),
        )
    elif query.data == "Champu_support":
        query.message.edit_caption("**‡πè ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è …¢·¥á·¥õ  ú·¥á ü·¥© ·¥Ä…¥·¥Ö ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä**"
            f"\n\n…™“ì  è·¥è·¥ú “ì·¥è·¥ú…¥·¥Ö ·¥Ä…¥ è  ô·¥ú…¢ …™…¥ {dispatcher.bot.first_name} ·¥è Ä …™“ì  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä …¢…™·¥†·¥á “ì·¥á·¥á·¥Ö ô·¥Ä·¥Ñ·¥ã ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥á {dispatcher.bot.first_name}, ·¥© ü·¥á·¥Äs·¥á  Ä·¥á·¥©·¥è Ä·¥õ …™·¥õ ·¥Ä·¥õ s·¥ú·¥©·¥©·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="s·¥ú·¥©·¥©·¥è Ä·¥õ", url=f"https://t.me/{SUPPORT_CHAT}"
                        ),
                        InlineKeyboardButton(
                            text="·¥ú·¥©·¥Ö·¥Ä·¥õ·¥ás", url=f"https://t.me/TheChampu"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="·¥Ñ ú·¥ß·¥ç·¥ò·¥ú", url=f"https://t.me/itsMeShivanshu"
                        ),
                        InlineKeyboardButton(
                            text="…¢…™·¥õ ú·¥ú ô", url="https://github.com/ChampuXD"
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ", callback_data="Champu_"),
                    ],
                ]
            ),
        )
    elif query.data == "Champu_back":
        first_name = update.effective_user.first_name 
        query.message.edit_caption(PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME,sql.num_users(),sql.num_chats()),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
        )
def ChampuRobot_Main_Callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "Main_help":
        query.message.edit_caption(f"""
  ú·¥á Ä·¥á …™Íú±  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú Íú∞·¥è Ä {BOT_NAME}
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="M·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ", callback_data="help_back"),
                        InlineKeyboardButton(text="M·¥ús…™·¥Ñ", callback_data="Music_")
                    ],
                    [
                        InlineKeyboardButton(text="B·¥Äs…™·¥Ñ ", callback_data="basic_help"),
                        InlineKeyboardButton(text="Ex·¥ò·¥á Ä·¥õ", callback_data="expert_help")
                    ],
                    [
                        InlineKeyboardButton(text="A·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á", callback_data="advance_help"),
                        InlineKeyboardButton(text="D·¥è…¥·¥Ä·¥õ…™·¥è…¥", callback_data="donation_help") 
                    ],
                    [InlineKeyboardButton(text="H·¥è·¥ç·¥á", callback_data="Champu_back")]
                ]
            ),
        )
    elif query.data=="basic_help":
        query.message.edit_caption("""B·¥Äs…™·¥Ñ C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.
A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥õ·¥è A·¥Ö·¥ç…™…¥s & M·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è Äs.
A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥õ·¥è A·¥Ö·¥ç…™…¥s.

 /reload ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥õ ú·¥á A·¥Ö·¥ç…™…¥s  ü…™s·¥õ ·¥Ä…¥·¥Ö ·¥õ ú·¥á…™ Ä ·¥ò Ä…™·¥†…™ ü·¥á…¢·¥ás.
 /settings  ü·¥á·¥õs  è·¥è·¥ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥Ä ü ü ·¥õ ú·¥á B·¥è·¥õ s·¥á·¥õ·¥õ…™…¥…¢s …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò.
 /ban  ü·¥á·¥õs  è·¥è·¥ú  ô·¥Ä…¥ ·¥Ä ·¥ús·¥á Ä “ì Ä·¥è·¥ç ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥°…™·¥õ ú·¥è·¥ú·¥õ …¢…™·¥†…™…¥…¢  ú…™·¥ç ·¥õ ú·¥á ·¥ò·¥èss…™ ô…™ ü…™·¥õ è ·¥õ·¥è J·¥è…™…¥ ·¥Ä…¢·¥Ä…™…¥ ·¥ús…™…¥…¢ ·¥õ ú·¥á  ü…™…¥·¥ã ·¥è“ì ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò.
 /mute ·¥ò·¥ú·¥õs ·¥Ä ·¥ús·¥á Ä …™…¥  Ä·¥á·¥Ä·¥Ö-·¥è…¥ ü è ·¥ç·¥è·¥Ö·¥á. H·¥á ·¥Ñ·¥Ä…¥  Ä·¥á·¥Ä·¥Ö  ô·¥ú·¥õ  ú·¥á ·¥Ñ·¥Ä…¥'·¥õ s·¥á…¥·¥Ö ·¥Ä…¥ è ·¥ç·¥áss·¥Ä…¢·¥ás.
 /kick  ô·¥Ä…¥s ·¥Ä ·¥ús·¥á Ä “ì Ä·¥è·¥ç ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò, …¢…™·¥†…™…¥…¢  ú…™·¥ç ·¥õ ú·¥á ·¥ò·¥èss…™ ô…™ ü…™·¥õ è ·¥õ·¥è J·¥è…™…¥ ·¥Ä…¢·¥Ä…™…¥ ·¥°…™·¥õ ú ·¥õ ú·¥á  ü…™…¥·¥ã ·¥è“ì ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò.
 /unban  ü·¥á·¥õs  è·¥è·¥ú  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ·¥ús·¥á Ä “ì Ä·¥è·¥ç …¢ Ä·¥è·¥ú·¥ò's  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ, …¢…™·¥†…™…¥…¢ ·¥õ ú·¥á·¥ç ·¥õ ú·¥á ·¥ò·¥èss…™ ô…™ ü…™·¥õ è ·¥õ·¥è J·¥è…™…¥ ·¥Ä…¢·¥Ä…™…¥ ·¥°…™·¥õ ú ·¥õ ú·¥á  ü…™…¥·¥ã ·¥è“ì ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò.
 /info …¢…™·¥†·¥ás …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥Ä ·¥ús·¥á Ä.

 /staff …¢…™·¥†·¥ás ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á L…™s·¥õ ·¥è“ì …¢ Ä·¥è·¥ú·¥ò S·¥õ·¥Ä“ì“ì!.""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Main_help"),InlineKeyboardButton(text="‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", callback_data="Champu_support")
                    ]
                ]
            ),
            )
    elif query.data=="Champu_back":
        query.message.edit_caption("""Ex·¥ò·¥á Ä·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös

 A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs
 A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥õ·¥è A·¥Ö·¥ç…™…¥s & M·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è Äs.
 A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥õ·¥è A·¥Ö·¥ç…™…¥s

  /unbanall ·¥ç·¥á·¥ç ô·¥á Äs “ì Ä·¥è·¥ç  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥òs
  /unmuteall ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ä ü ü ·¥Ä ü ü “ì Ä·¥è·¥ç Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò

P…™…¥…¥·¥á·¥Ö M·¥áss·¥Ä…¢·¥ás
  /pin [·¥ç·¥áss·¥Ä…¢·¥á] s·¥á…¥·¥Ös ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ ú Ä·¥è·¥ú…¢ ú ·¥õ ú·¥á B·¥è·¥õ ·¥Ä…¥·¥Ö ·¥ò…™…¥s …™·¥õ.
  /pin ·¥ò…™…¥s ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á …™…¥  Ä·¥á·¥ò ü è
  /unpin  Ä·¥á·¥ç·¥è·¥†·¥ás ·¥õ ú·¥á ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á.
  /adminlist  ü…™s·¥õ ·¥è“ì ·¥Ä ü ü ·¥õ ú·¥á s·¥ò·¥á·¥Ñ…™·¥Ä ü  Ä·¥è ü·¥ás ·¥Äss…™…¢…¥·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á Äs.

  /bug: (·¥ç·¥áss·¥Ä…¢·¥á) ·¥õ·¥è S·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á ·¥Ä…¥·¥Ö ·¥á Ä Ä·¥è Äs ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥Ä Ä·¥á “ì·¥Ä·¥Ñ…™…¥…¢ 
·¥áx: /bug H·¥á è T ú·¥á Ä·¥á Is ·¥Ä S·¥è·¥ç·¥á·¥õ ú…™…¥…¢ E Ä Ä·¥è Ä @username ·¥è“ì ·¥Ñ ú·¥Ä·¥õ! .""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Main_help"),InlineKeyboardButton(text="‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", callback_data="Champu_support")
                    ]
                ]
            ),
            )                                        
    elif query.data=="advance_help":
        query.message.edit_caption("""A·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös

A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥õ·¥è A·¥Ö·¥ç…™…¥s & M·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è Äs.
A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥õ·¥è A·¥Ö·¥ç…™…¥s.
A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥õ·¥è A·¥Ö·¥ç…™…¥s & C ü·¥á·¥Ä…¥·¥á Äs

W·¥Ä Ä…¥ M·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ
  /warn ·¥Ä·¥Ö·¥Ös ·¥Ä ·¥°·¥Ä Ä…¥ ·¥õ·¥è ·¥õ ú·¥á ·¥ús·¥á Ä
  /unwarn  Ä·¥á·¥ç·¥è·¥†·¥ás ·¥Ä ·¥°·¥Ä Ä…¥ ·¥õ·¥è ·¥õ ú·¥á ·¥ús·¥á Ä
  /warns  ü·¥á·¥õs  è·¥è·¥ú s·¥á·¥á ·¥Ä…¥·¥Ö ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥ús·¥á Ä ·¥°·¥Ä Ä…¥s
  /del ·¥Ö·¥á ü·¥á·¥õ·¥ás ·¥õ ú·¥á s·¥á ü·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á
  /purge ·¥Ö·¥á ü·¥á·¥õ·¥ás “ì Ä·¥è·¥ç ·¥õ ú·¥á s·¥á ü·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á.""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Main_help"),InlineKeyboardButton(text="‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", callback_data="Champu_support")
                    ]
                ]
            ),
            )
    elif query.data=="expert_help":
        query.message.edit_caption(f"""‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéâ **·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õ·¥ú ü·¥Ä·¥õ…™·¥è…¥s!** üéâ

[{BOT_NAME}]("https://t.me/{BOT_USERNAME}") …™s …¥·¥è·¥° ·¥Ä·¥õ  è·¥è·¥ú Ä s·¥á Ä·¥†…™·¥Ñ·¥á ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥á“ì“ì·¥á·¥Ñ·¥õ…™·¥†·¥á ü è.

**·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è·¥è üs**:
·¥á·¥ç·¥ò·¥è·¥°·¥á Ä  è·¥è·¥ú Äs·¥á ü“ì ·¥°…™·¥õ ú  ô·¥Äs…™·¥Ñ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è·¥è üs ·¥õ·¥è s·¥Ä“ì·¥á…¢·¥ú·¥Ä Ä·¥Ö ·¥Ä…¥·¥Ö s·¥ú·¥ò·¥á Ä·¥Ñ ú·¥Ä Ä…¢·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò.  ô·¥Ä…¥, ·¥ã…™·¥Ñ·¥ã, ·¥è Ä ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥ç·¥á·¥ç ô·¥á Äs s·¥á·¥Ä·¥ç ü·¥áss ü è ·¥ús…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ.

**…¢ Ä·¥á·¥á·¥õ…™…¥…¢s**:
 ü·¥á·¥õ's ·¥Ñ Ä·¥Ä“ì·¥õ ·¥Ä ·¥°·¥Ä Ä·¥ç ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥á “ì·¥è Ä …¥·¥á·¥° ·¥ús·¥á Äs ·¥ä·¥è…™…¥…™…¥…¢  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò. ·¥ús·¥á /s·¥á·¥õ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥Ñ·¥ús·¥õ·¥è·¥ç…™·¥¢·¥á  è·¥è·¥ú Ä ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥á!

 ü·¥á·¥†·¥á ü ·¥ú·¥ò  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ ·¥°…™·¥õ ú [·¥Ñ ú·¥ß·¥ç·¥ò·¥ú]("https://t.me/TheChampu")!""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Main_help"),InlineKeyboardButton(text="‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", callback_data="Champu_support")
                    ]
                ]
            ),
            )
    elif query.data=="donation_help":
        query.message.edit_caption("""·¥á·¥ç·¥ò·¥è·¥°·¥á Ä ·¥Ñ ú·¥Ä·¥ç·¥ò·¥úx Ä·¥è ô·¥è·¥õ's …¢ Ä·¥è·¥°·¥õ ú ·¥Ä…¥·¥Ö ·¥á…¥s·¥ú Ä·¥á …™·¥õs ·¥†…™·¥õ·¥Ä ü…™·¥õ è!  è·¥è·¥ú Ä ·¥Ñ·¥è…¥·¥õ Ä…™ ô·¥ú·¥õ…™·¥è…¥s “ì·¥ú·¥á ü s·¥á Ä·¥†·¥á Ä ·¥ç·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á ·¥Ä…¥·¥Ö ·¥áx·¥Ñ…™·¥õ…™…¥…¢ ·¥ú·¥ò…¢ Ä·¥Ä·¥Ö·¥ás. ·¥á·¥†·¥á Ä è ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥ …™…¥s·¥ò…™ Ä·¥ás ·¥ús ·¥õ·¥è …™…¥…¥·¥è·¥†·¥Ä·¥õ·¥á ·¥Ä…¥·¥Ö …™…¥·¥õ Ä·¥è·¥Ö·¥ú·¥Ñ·¥á “ì Ä·¥ás ú “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás. ·¥Ä·¥Ñ·¥õ …¥·¥è·¥° ·¥õ·¥è s·¥á·¥Ñ·¥ú Ä·¥á ·¥Ñ ú·¥Ä·¥ç·¥ò·¥úx Ä·¥è ô·¥è·¥õ's “ì·¥ú·¥õ·¥ú Ä·¥á ·¥Ä…¥·¥Ö  ô·¥á ·¥Ä ·¥ò·¥Ä Ä·¥õ ·¥è“ì …™·¥õs ·¥á·¥†·¥è ü·¥ú·¥õ…™·¥è…¥. ·¥õ·¥è…¢·¥á·¥õ ú·¥á Ä,  ü·¥á·¥õ's s ú·¥Ä·¥ò·¥á ·¥Ä  ô Ä…™…¢ ú·¥õ·¥á Ä ·¥õ·¥è·¥ç·¥è Ä Ä·¥è·¥°!""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [ 
                    [
                        InlineKeyboardButton(text="D·¥è…¥·¥Ä·¥õ·¥á", url="https://t.me/Champu_Editz/105"),InlineKeyboardButton(text="‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", callback_data="Champu_support")
                    ],
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Main_help")
                    ],                    
                ]
            ),
            )  
        
def Music_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "Music_":
        query.message.edit_caption(f"""
  ú·¥á Ä·¥á …™Íú±  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú Íú∞·¥è Ä ·¥ç·¥úÍú±…™·¥Ñ 
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="A·¥Ö·¥ç…™…¥", callback_data="Music_admin"
                        ),
                        InlineKeyboardButton(
                            text="A·¥ú·¥õ ú", callback_data="Music_auth"
                        ),
                        InlineKeyboardButton(
                            text="B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ", callback_data="Music_broadcast"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="B ü-C ú·¥Ä·¥õ", callback_data="Music_blchat"
                        ),
                        InlineKeyboardButton(
                            text="B ü-Us·¥á Ä", callback_data="Music_bluser"
                        ),
                        InlineKeyboardButton(
                            text="C-P ü·¥Ä è", callback_data="Music_cplay"
                        ),
                    ],            
                    [
                        InlineKeyboardButton(
                            text="G-B·¥Ä…¥", callback_data="Music_gban"
                        ),
                        InlineKeyboardButton(
                            text="L·¥è·¥è·¥ò", callback_data="Music_loop"
                        ),
                        InlineKeyboardButton(
                            text="M·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á", callback_data="Music_maintenance"
                        ),
                    ],               
                    [
                        InlineKeyboardButton(
                            text="P…™…¥…¢", callback_data="Music_ping"
                        ),
                        InlineKeyboardButton(
                            text="P ü·¥Ä è", callback_data="Music_play"
                        ),
                        InlineKeyboardButton(
                            text="S ú·¥ú“ì“ì ü·¥á", callback_data="Music_shuffle"
                        ),
                    ],       
                    [
                        InlineKeyboardButton(
                            text="S·¥á·¥á·¥ã", callback_data="Music_seek"
                        ),
                        InlineKeyboardButton(
                            text="S·¥è…¥…¢", callback_data="Music_song"
                        ),
                        InlineKeyboardButton(
                            text="S·¥ò·¥á·¥á·¥Ö", callback_data="Music_speed"
                        ),
                    ],                                               
                    [
                        InlineKeyboardButton(text=" ô·¥è·¥õ", callback_data="Music_bot"),
                        InlineKeyboardButton(
                            text="·¥áx·¥õ Ä·¥Ä",
                            callback_data="Music_extra",
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Main_help")
                    ],
                ]
            ),
        )
    elif query.data == "Music_admin":
        query.message.edit_caption(f"*¬ª ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ¬´*"
            f"""
·¥ä·¥ús·¥õ ·¥Ä·¥Ö·¥Ö *·¥Ñ* …™…¥ ·¥õ ú·¥á s·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥è“ì ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥õ·¥è ·¥ús·¥á ·¥õ ú·¥á·¥ç “ì·¥è Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü.

/pause : ·¥©·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç.

/resume :  Ä·¥ás·¥ú·¥ç·¥á ·¥õ ú·¥á ·¥©·¥Ä·¥ús·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç.

/skip : s·¥ã…™·¥© ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á …¥·¥áx·¥õ ·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥ «´·¥ú·¥á·¥ú·¥á.

/end ·¥è Ä /stop : ·¥Ñ ü·¥á·¥Ä Äs ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á ·¥Ä…¥·¥Ö ·¥á…¥·¥Ö ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç.

/player : …¢·¥á·¥õ ·¥Ä …™…¥·¥õ·¥á Ä·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥© ü·¥Ä è·¥á Ä ·¥©·¥Ä…¥·¥á ü.

/queue : s ú·¥è·¥°s ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ãs  ü…™s·¥õ.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="  ô·¥Ä·¥Ñ·¥ã ", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_auth":
        query.message.edit_caption(f"*¬ª ·¥Ä·¥ú·¥õ ú ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ¬´*"
            f"""

·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs …™…¥ ·¥õ ú·¥á  ô·¥è·¥õ ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ.

/auth [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á/·¥ús·¥á Ä_…™·¥Ö] : ·¥Ä·¥Ö·¥Ö ·¥Ä ·¥ús·¥á Ä ·¥õ·¥è ·¥Ä·¥ú·¥õ ú  ü…™s·¥õ ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.
/unauth [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á/·¥ús·¥á Ä_…™·¥Ö] :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs  ü…™s·¥õ.
/authusers : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì ·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs ·¥è“ì ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥©.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_broadcast":
        query.message.edit_caption(f"*¬ª  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ¬´*"
            f"""
/play or /vplay or /cplay  -  ô·¥è·¥õ ·¥°…™ ü ü Íú±·¥õ·¥Ä Ä·¥õ ·¥ò ü·¥Ä è…™…¥…¢  è·¥è·¥ú Ä …¢…™·¥†·¥á…¥ œô·¥ú·¥á Ä è on ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ ·¥è Ä Íú±·¥õ Ä·¥á·¥Ä·¥ç  ü…™·¥†·¥á  ü…™…¥·¥ãÍú± ·¥è…¥ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õÍú±.

/playforce or /vplayforce or /cplayforce -  “ì·¥è Ä·¥Ñ·¥á ·¥ò ü·¥Ä è Íú±·¥õ·¥è·¥òÍú± ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥ò ü·¥Ä è…™…¥…¢ ·¥õ Ä·¥Ä·¥Ñ·¥ã ·¥è…¥ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ ·¥Ä…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õÍú± ·¥ò ü·¥Ä è…™…¥…¢ ·¥õ ú·¥á Íú±·¥á·¥Ä Ä·¥Ñ ú·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥Íú±·¥õ·¥Ä…¥·¥õ ü è ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥Ö…™Íú±·¥õ·¥ú Ä ô…™…¥…¢/clearing queue.

/channelplay [·¥Ñ ú·¥Ä·¥õ ·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä …™·¥Ö] ·¥è Ä [·¥Ö…™Íú±·¥Ä ô ü·¥á] - ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ä…¥·¥Ö Íú±·¥õ Ä·¥á·¥Ä·¥ç ·¥ç·¥úÍú±…™·¥Ñ ·¥è…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ “ì Ä·¥è·¥ç  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò.


* ô·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±*
  ô·¥è·¥õ  Íú±·¥á Ä·¥†·¥á Ä ·¥ò ü·¥Ä è ü…™Íú±·¥õÍú±:
/playlist  - ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä Íú±·¥Ä·¥†·¥á·¥Ö ·¥ò ü·¥Ä è ü…™Íú±·¥õ ·¥è…¥ Íú±·¥á Ä·¥†·¥á ÄÍú±.
/deleteplaylist - ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä…¥ è Íú±·¥Ä·¥†·¥á·¥Ö ·¥ç·¥úÍú±…™·¥Ñ …™…¥  è·¥è·¥ú Ä ·¥ò ü·¥Ä è ü…™Íú±·¥õ
/play  - Íú±·¥õ·¥Ä Ä·¥õ ·¥ò ü·¥Ä è…™…¥…¢  è·¥è·¥ú Ä Íú±·¥Ä·¥†·¥á·¥Ö ·¥ò ü·¥Ä è ü…™Íú±·¥õ “ì Ä·¥è·¥ç Íú±·¥á Ä·¥†·¥á ÄÍú±.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_blchat":
        query.message.edit_caption(f"*¬ª ·¥Ñ ú·¥Ä·¥õ  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á ¬´*"
            f"""

[·¥è…¥ ü è “ì·¥è Ä s·¥ú·¥Ö·¥è·¥á Äs]            

/ Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ s ú…™·¥õ ·¥Ñ ú·¥Ä·¥õs ·¥õ·¥è ·¥ús·¥á ·¥è·¥ú Ä ·¥ò Ä·¥á·¥Ñ…™·¥è·¥ús  ô·¥è·¥õ.

/blacklistchat [·¥Ñ ú·¥Ä·¥õ …™·¥Ö] :  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ ·¥Ä ·¥Ñ ú·¥Ä·¥õ “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ.
/whitelistchat [·¥Ñ ú·¥Ä·¥õ …™·¥Ö] : ·¥° ú…™·¥õ·¥á ü…™s·¥õ ·¥õ ú·¥á  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ.
/blacklistedchat : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )    
    elif query.data == "Music_bluser":
        query.message.edit_caption(f"*¬ª  ô ü·¥è·¥Ñ·¥ã ·¥ús·¥á Äs ¬´*"
            f"""
[·¥è…¥ ü è “ì·¥è Ä s·¥ú·¥Ö·¥è·¥á Äs]

s·¥õ·¥Ä Ä·¥õs …™…¢…¥·¥è Ä…™…¥…¢ ·¥õ ú·¥á  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ·¥á·¥Ö ·¥ús·¥á Ä, s·¥è ·¥õ ú·¥Ä·¥õ  ú·¥á ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á  ô·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.

/block [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä] :  ô ü·¥è·¥Ñ·¥ã ·¥õ ú·¥á ·¥ús·¥á Ä “ì Ä·¥è·¥ç ·¥è·¥ú Ä  ô·¥è·¥õ.
/unblock [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä] : ·¥ú…¥ ô ü·¥è·¥Ñ·¥ãs ·¥õ ú·¥á  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Ä.
/blockedusers : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Äs
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )    
    elif query.data == "Music_cplay":
        query.message.edit_caption(f"*¬ª ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥© ü·¥Ä è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ¬´*"
            f"""

 è·¥è·¥ú ·¥Ñ·¥Ä…¥ s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ä·¥ú·¥Ö…™·¥è/·¥†…™·¥Ö·¥á·¥è …™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü.

/cplay : s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥Ä·¥ú·¥Ö…™·¥è ·¥õ Ä·¥Ä·¥Ñ·¥ã ·¥è…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü's ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ.
/cvplay : s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥†…™·¥Ö·¥á·¥è ·¥õ Ä·¥Ä·¥Ñ·¥ã ·¥è…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü's ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ.
/cplayforce or /cvplayforce : s·¥õ·¥è·¥©s ·¥õ ú·¥á ·¥è…¥…¢·¥è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã.

/channelplay [·¥Ñ ú·¥Ä·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä …™·¥Ö] ·¥è Ä [·¥Ö…™s·¥Ä ô ü·¥á] : ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥Ä …¢ Ä·¥è·¥ú·¥© ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ Ä·¥Ä·¥Ñ·¥ãs  ô è ·¥õ ú·¥á  ú·¥á ü·¥© ·¥è“ì ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös s·¥á…¥·¥õ …™…¥ …¢ Ä·¥è·¥ú·¥©.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )              
    elif query.data == "Music_gban":
        query.message.edit_caption(f"*¬ª …¢ ü·¥è ô·¥Ä ü  ô·¥Ä…¥ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á ¬´*"
            f"""

[·¥è…¥ ü è “ì·¥è Ä s·¥ú·¥Ö·¥è·¥á Äs]            
            
/gban [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä] : …¢ ü·¥è ô·¥Ä ü ü è  ô·¥Ä…¥s ·¥õ ú·¥á ·¥Ñ ú·¥ú·¥õ…™ è·¥Ä “ì Ä·¥è·¥ç ·¥Ä ü ü ·¥õ ú·¥á s·¥á Ä·¥†·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs ·¥Ä…¥·¥Ö  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ  ú…™·¥ç “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ.
/ungban [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä] : …¢ ü·¥è ô·¥Ä ü ü è ·¥ú…¥ ô·¥Ä…¥s ·¥õ ú·¥á …¢ ü·¥è ô·¥Ä ü ü è  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä.
/gbannedusers : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì …¢ ü·¥è ô·¥Ä ü ü è  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        ) 
    elif query.data == "Music_loop":
        query.message.edit_caption(f"*¬ª  ü·¥è·¥è·¥ò s·¥õ Ä·¥á·¥Ä·¥ç ¬´*"
            f"""
s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á ·¥è…¥…¢·¥è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç …™…¥  ü·¥è·¥è·¥ò.

/loop [enable/disable] : ·¥á…¥·¥Ä ô ü·¥ás/·¥Ö…™s·¥Ä ô ü·¥ás  ü·¥è·¥è·¥ò “ì·¥è Ä ·¥õ ú·¥á ·¥è…¥…¢·¥è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç
/loop [1, 2, 3, ...] : ·¥á…¥·¥Ä ô ü·¥ás ·¥õ ú·¥á  ü·¥è·¥è·¥ò “ì·¥è Ä ·¥õ ú·¥á …¢…™·¥†·¥á…¥ ·¥†·¥Ä ü·¥ú·¥á.

""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_maintenance":
        query.message.edit_caption(f"*¬ª ·¥ç·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á ·¥ç·¥è·¥Ö·¥á ¬´*"
            f"""

/logs : …¢·¥á·¥õ  ü·¥è…¢s ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.

/logger [·¥á…¥·¥Ä ô ü·¥á/·¥Ö…™s·¥Ä ô ü·¥á] :  ô·¥è·¥õ ·¥°…™ ü ü s·¥õ·¥Ä Ä·¥õ  ü·¥è…¢…¢…™…¥…¢ ·¥õ ú·¥á ·¥Ä·¥Ñ·¥õ…™·¥†…™·¥õ…™·¥ás  ú·¥Ä·¥©·¥©·¥á…¥ ·¥è…¥  ô·¥è·¥õ.

/maintenance [·¥á…¥·¥Ä ô ü·¥á/·¥Ö…™s·¥Ä ô ü·¥á] : ·¥á…¥·¥Ä ô ü·¥á ·¥è Ä ·¥Ö…™s·¥Ä ô ü·¥á ·¥õ ú·¥á ·¥ç·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á ·¥ç·¥è·¥Ö·¥á ·¥è“ì  è·¥è·¥ú Ä  ô·¥è·¥õ.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_ping":
        query.message.edit_caption(f"*¬ª ·¥ò…™…¥…¢ & s·¥õ·¥Ä·¥õs ¬´*"
            f"""

/mstart : s·¥õ·¥Ä Ä·¥õs ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ.
/mhelp : …¢·¥á·¥õ  ú·¥á ü·¥© ·¥ç·¥á…¥·¥ú ·¥°…™·¥õ ú ·¥áx·¥© ü·¥Ä…¥·¥Ä·¥õ…™·¥è…¥ ·¥è“ì ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.

/ping : s ú·¥è·¥°s ·¥õ ú·¥á ·¥©…™…¥…¢ ·¥Ä…¥·¥Ö s ès·¥õ·¥á·¥ç s·¥õ·¥Ä·¥õs ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.

/stats : s ú·¥è·¥°s ·¥õ ú·¥á ·¥è·¥†·¥á Ä·¥Ä ü ü s·¥õ·¥Ä·¥õs ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_play":
        query.message.edit_caption(f"*¬ª ·¥© ü·¥Ä è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ¬´*"
            f"""

/play ·¥è Ä /vplay : s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã ·¥è…¥ ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ.

/playforce ·¥è Ä /vplayforce : s·¥õ·¥è·¥©s ·¥õ ú·¥á ·¥è…¥…¢·¥è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )        
    elif query.data == "Music_shuffle":
        query.message.edit_caption(f"*¬ª s ú·¥ú“ì“ì ü·¥á ·¥èÃ®·¥ú·¥á·¥ú·¥á ¬´*"
            f"""

/shuffle : s ú·¥ú“ì“ì ü·¥á's ·¥õ ú·¥á ·¥èÃ®·¥ú·¥á·¥ú·¥á.
/queue : s ú·¥è·¥°s ·¥õ ú·¥á s ú·¥ú“ì“ì ü·¥á·¥Ö ·¥èÃ®·¥ú·¥á·¥ú·¥á.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )          
    elif query.data == "Music_seek":
        query.message.edit_caption(f"*¬ª s·¥á·¥á·¥ã s·¥õ Ä·¥á·¥Ä·¥ç ¬´*"
            f"""

/seek [·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥ …™…¥ s·¥á·¥Ñ·¥è…¥·¥Ös] : s·¥á·¥á·¥ã ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥õ·¥è ·¥õ ú·¥á …¢…™·¥†·¥á…¥ ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥.
/seekback [·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥ …™…¥ s·¥á·¥Ñ·¥è…¥·¥Ös] :  ô·¥Ä·¥Ñ·¥ã·¥°·¥Ä Ä·¥Ö s·¥á·¥á·¥ã ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥õ·¥è ·¥õ ú·¥á ·¥õ ú·¥á …¢…™·¥†·¥á…¥ ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )     
    elif query.data == "Music_song":
        query.message.edit_caption(f"*¬ª s·¥è…¥…¢ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ¬´*"
            f"""

/song [s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á/ è·¥õ ·¥ú Ä ü] : ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥Ä…¥ è ·¥õ Ä·¥Ä·¥Ñ·¥ã “ì Ä·¥è·¥ç  è·¥è·¥ú·¥õ·¥ú ô·¥á …™…¥ ·¥ç·¥ò3 ·¥è Ä ·¥ç·¥ò4 “ì·¥è Ä·¥ç·¥Ä·¥õs.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )       
    elif query.data == "Music_speed":
        query.message.edit_caption(f"*¬ª s·¥ò·¥á·¥á·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ¬´*"
            f"""
 è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ·¥è…¥·¥õ Ä·¥è ü ·¥õ ú·¥á ·¥ò ü·¥Ä è ô·¥Ä·¥Ñ·¥ã s·¥ò·¥á·¥á·¥Ö ·¥è“ì ·¥õ ú·¥á ·¥è…¥…¢·¥è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç. [·¥Ä·¥Ö·¥ç…™…¥s ·¥è…¥ ü è]

/speed or /playback : “ì·¥è Ä ·¥Ä·¥Ö·¥ä·¥ús·¥õ…™…¥…¢ ·¥õ ú·¥á ·¥Ä·¥ú·¥Ö…™·¥è ·¥ò ü·¥Ä è ô·¥Ä·¥Ñ·¥ã s·¥ò·¥á·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò.
/cspeed or /cplayback : “ì·¥è Ä ·¥Ä·¥Ö·¥ä·¥ús·¥õ…™…¥…¢ ·¥õ ú·¥á ·¥Ä·¥ú·¥Ö…™·¥è ·¥ò ü·¥Ä è ô·¥Ä·¥Ñ·¥ã s·¥ò·¥á·¥á·¥Ö …™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )                
    elif query.data == "Music_bot":
        query.message.edit_caption(f"*¬ª  ô·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ¬´*"
            f"""
/stats - …¢·¥á·¥õ ·¥õ·¥è·¥ò 10 ·¥õ Ä·¥Ä·¥Ñ·¥ãÍú± …¢ ü·¥è ô·¥Ä ü Íú±·¥õ·¥Ä·¥õÍú±, ·¥õ·¥è·¥ò 10 ·¥úÍú±·¥á ÄÍú± ·¥è“ì  ô·¥è·¥õ, ·¥õ·¥è·¥ò 10 ·¥Ñ ú·¥Ä·¥õÍú± ·¥è…¥  ô·¥è·¥õ, ·¥õ·¥è·¥ò 10 ·¥ò ü·¥Ä è·¥á·¥Ö …™…¥ ·¥Ä ·¥Ñ ú·¥Ä·¥õ ·¥á·¥õ·¥Ñ ·¥á·¥õ·¥Ñ.

/sudolist - ·¥Ñ ú·¥á·¥Ñ·¥ã s·¥ú·¥Ö·¥è ·¥ús·¥á Äs ·¥è“ì ·¥Ä ô…¢   ô·¥è·¥õ

/lyrics [·¥ç·¥ús…™·¥Ñ …¥·¥Ä·¥ç·¥á] - s·¥á·¥Ä Ä·¥Ñ ú·¥ás  ü è Ä…™·¥Ñs “ì·¥è Ä ·¥õ ú·¥á ·¥ò·¥Ä Ä·¥õ…™·¥Ñ·¥ú ü·¥Ä Ä ·¥ç·¥ús…™·¥Ñ ·¥è…¥ ·¥°·¥á ô.

/song [·¥õ Ä·¥Ä·¥Ñ·¥ã …¥·¥Ä·¥ç·¥á] or [ è·¥õ  ü…™…¥·¥ã] - ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥Ä…¥ è ·¥õ Ä·¥Ä·¥Ñ·¥ã “ì Ä·¥è·¥ç  è·¥è·¥ú·¥õ·¥ú ô·¥á …™…¥ ·¥ç·¥ò3 or ·¥ç·¥ò4 “ì·¥è Ä·¥ç·¥Ä·¥õÍú±.

/player -  …¢·¥át ·¥Ä …™…¥·¥õ·¥á Ä·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥ò ü·¥Ä è…™…¥…¢ ·¥ò·¥Ä…¥·¥á ü.

c Íú±·¥õ·¥Ä…¥·¥ÖÍú± Íú∞·¥è Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ò ü·¥Ä è.

/queue ·¥è Ä /cqueue- ·¥Ñ ú·¥á·¥Ñ·¥ã Q·¥ú·¥á·¥ú·¥á  ü…™Íú±·¥õ ·¥èÍú∞ ·¥ç·¥úÍú±…™·¥Ñ.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="  ô·¥Ä·¥Ñ·¥ã ", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_extra":
        query.message.edit_caption(f"*¬ª ·¥áx·¥õ Ä·¥Ä ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ¬´*"
            f"""
/mstart - Íú±·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á ·¥ç·¥úÍú±…™·¥Ñ  ô·¥è·¥õ.
/mhelp  - …¢·¥á·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±  ú·¥á ü·¥ò·¥á Ä ·¥ç·¥á…¥·¥ú ·¥°…™·¥õ ú ·¥Ö·¥á·¥õ·¥Ä…™ ü·¥á·¥Ö ·¥áx·¥ò ü·¥Ä…¥·¥Ä·¥õ…™·¥è…¥Íú± ·¥è“ì ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±.
/mping- ·¥ò…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ä…¥·¥Ö ·¥Ñ ú·¥á·¥Ñ·¥ã  Ä·¥Ä·¥ç, ·¥Ñ·¥ò·¥ú ·¥á·¥õ·¥Ñ Íú±·¥õ·¥Ä·¥õÍú± ·¥è“ì  ô·¥è·¥õ.

*…¢ Ä·¥è·¥ú·¥ò Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±:*
/msettings - …¢·¥á·¥õ a ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á …¢ Ä·¥è·¥ú·¥ò Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± ·¥°…™·¥õ ú …™…¥ ü…™…¥·¥á  ô·¥ú·¥õ·¥õ·¥è…¥Íú±
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="  ô·¥Ä·¥Ñ·¥ã ", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_back":
        first_name = update.effective_user.first_name
        query.message.edit_caption(PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,

        )


def get_help(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    args = update.effective_message.text.split(None, 1)

    # ONLY send help in PM
    if chat.type != chat.PRIVATE:
        if len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
            module = args[1].lower()
            update.effective_message.reply_video(START_IMG,
                f"Contact me in PM to get help of {module.capitalize()}",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="  ú·¥á ü·¥ò ‚Äã",
                                url="t.me/{}?start=ghelp_{}".format(
                                    context.bot.username, module
                                ),
                            )
                        ]
                    ]
                ),
            )
            return
        update.effective_message.reply_video(START_IMG,"¬ª W ú·¥á Ä·¥á ·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥è·¥ò·¥á…¥ ·¥õ ú·¥á s·¥á·¥õ·¥õ…™…¥…¢s ·¥ç·¥á…¥·¥ú?.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥è·¥©·¥á…¥ …™…¥ ·¥© Ä…™·¥†·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä·¥õ",
                            url="https://t.me/{}?start=help".format(context.bot.username),
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="·¥è·¥©·¥á…¥  ú·¥á Ä·¥á",
                            callback_data="help_back",
                        )
                    ],
                ]
            ),
        )
        return

    elif len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
        module = args[1].lower()
        text = (
            "Here is the available help for the *{}* module:\n".format(
                HELPABLE[module].__mod_name__
            )
            + HELPABLE[module].__help__
        )
        send_help(
            chat.id,
            text,
            InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="Champu_support")]]
            ),
        )

    else:
        send_help(chat.id, HELP_STRINGS)


def send_settings(chat_id, user_id, user=False):
    if user:
        if USER_SETTINGS:
            settings = "\n\n".join(
                "*{}*:\n{}".format(mod.__mod_name__, mod.__user_settings__(user_id))
                for mod in USER_SETTINGS.values()
            )
            dispatcher.bot.send_message(
                user_id,
                "These are your current settings:" + "\n\n" + settings,
                parse_mode=ParseMode.MARKDOWN,
            )

        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any user specific settings available :'(",
                parse_mode=ParseMode.MARKDOWN,
            )

    else:
        if CHAT_SETTINGS:
            chat_name = dispatcher.bot.getChat(chat_id).title
            dispatcher.bot.send_message(
                user_id,
                text="Which module would you like to check {}'s settings for?".format(
                    chat_name
                ),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )
        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any chat settings available :'(\nSend this "
                "in a group chat you're admin in to find its current settings!",
                parse_mode=ParseMode.MARKDOWN,
            )


def settings_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user = update.effective_user
    bot = context.bot
    mod_match = re.match(r"stngs_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"stngs_prev\((.+?),(.+?)\)", query.data)
    next_match = re.match(r"stngs_next\((.+?),(.+?)\)", query.data)
    back_match = re.match(r"stngs_back\((.+?)\)", query.data)
    try:
        if mod_match:
            chat_id = mod_match.group(1)
            module = mod_match.group(2)
            chat = bot.get_chat(chat_id)
            text = "*{}* has the following settings for the *{}* module:\n\n".format(
                escape_markdown(chat.title), CHAT_SETTINGS[module].__mod_name__
            ) + CHAT_SETTINGS[module].__chat_settings__(chat_id, user.id)
            query.message.reply_text(text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="‚óÅ",
                                callback_data="stngs_back({})".format(chat_id),
                            )
                        ]
                    ]
                ),
            )

        elif prev_match:
            chat_id = prev_match.group(1)
            curr_page = int(prev_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text("""Hi there! There are quite a few settings for {} - go ahead and pick what "
                you're interested in.""".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        curr_page - 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif next_match:
            chat_id = next_match.group(1)
            next_page = int(next_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(text=
                """Hi there! There are quite a few settings for {} - go ahead and pick what 
                you're interested in.""".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        next_page + 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif back_match:
            chat_id = back_match.group(1)
            chat = bot.get_chat(chat_id)
            query.message.reply_text("""Hi there! There are quite a few settings for {} - go ahead and pick what 
                you're interested in.""".format(escape_markdown(chat.title)),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )

        # ensure no spinny white circle
        bot.answer_callback_query(query.id)
        query.message.delete()
    except BadRequest as excp:
        if excp.message not in [
            "Message is not modified",
            "Query_id_invalid",
            "Message can't be deleted",
        ]:
            LOGGER.exception("Exception in settings buttons. %s", str(query.data))


def get_settings(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    msg = update.effective_message  # type: Optional[Message]

    # ONLY send settings in PM
    if chat.type != chat.PRIVATE:
        if is_user_admin(chat, user.id):
            text = "·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è …¢·¥á·¥õ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ's s·¥á·¥õ·¥õ…™…¥…¢s ·¥Äs ·¥°·¥á ü ü ·¥Äs  è·¥è·¥ú Äs"
            msg.reply_video(START_IMG,text,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="s·¥á·¥õ·¥õ…™…¥…¢s‚Äã",
                                url="t.me/{}?start=stngs_{}".format(
                                    context.bot.username, chat.id
                                ),
                            )
                        ]
                    ]
                ),
            )
        else:
            text = "·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä s·¥á·¥õ·¥õ…™…¥…¢s"

    else:
        send_settings(chat.id, user.id, True)


def donate(update: Update, context: CallbackContext):
    user = update.effective_message.from_user
    chat = update.effective_chat  # type: Optional[Chat]
    bot = context.bot
    if chat.type == "private":
        update.effective_message.reply_text(
            DONATE_STRING, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True
        )

        if OWNER_ID != 6399386263:
            update.effective_message.reply_text(
                f"¬ª ·¥õ ú·¥á ·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä ·¥è“ì {dispatcher.bot.first_name} s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á …™s […¢…™·¥õ ú·¥ú ô](https://github.com/ChampuXD/ChampuRobot)"
                f"\n\n ô·¥ú·¥õ  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä üs·¥è ·¥Ö·¥è…¥·¥Ä·¥õ·¥á ·¥õ·¥è ·¥õ ú·¥á ·¥©·¥á Äs·¥è…¥ ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è  Ä·¥ú…¥…¥…™…¥…¢ ·¥ç·¥á : [ ú·¥á Ä·¥á]({DONATE_STRING})",
                parse_mode=ParseMode.MARKDOWN,
                
            )

    else:
        try:
            bot.send_message(
                user.id,
                DONATE_STRING,
                parse_mode=ParseMode.MARKDOWN,
                
            )

            update.effective_message.reply_text(
                "…™'·¥†·¥á ·¥ò·¥ç'·¥á·¥Ö  è·¥è·¥ú ·¥Ä ô·¥è·¥ú·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ ·¥õ·¥è ·¥ç è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä!"
            )
        except Unauthorized:
            update.effective_message.reply_text(
                "·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á …™…¥ ·¥ò·¥ç “ì…™ Äs·¥õ ·¥õ·¥è …¢·¥á·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥."
            )


def migrate_chats(update: Update, context: CallbackContext):
    msg = update.effective_message  # type: Optional[Message]
    if msg.migrate_to_chat_id:
        old_chat = update.effective_chat.id
        new_chat = msg.migrate_to_chat_id
    elif msg.migrate_from_chat_id:
        old_chat = msg.migrate_from_chat_id
        new_chat = update.effective_chat.id
    else:
        return

    LOGGER.info("Migrating from %s, to %s", str(old_chat), str(new_chat))
    for mod in MIGRATEABLE:
        mod.__migrate__(old_chat, new_chat)

    LOGGER.info("Successfully migrated!")
    raise DispatcherHandlerStop


def main():
    global x
    x=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="‚ûï·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ‚ûï",
                            url="https://t.me/{}?startgroup=true"
                            )
                       ]
                ]
                     )
    if SUPPORT_CHAT is not None and isinstance(SUPPORT_CHAT, str):
        try:
            dispatcher.bot.send_video(
                f"@{SUPPORT_CHAT}",
                video=f"{START_IMG}",
                caption=f"""
‚ú®„Ö§{BOT_NAME} …™s ·¥Ä ü…™·¥†·¥á  ô·¥Ä ô è.
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
**·¥ò è·¥õ ú·¥è…¥ ·¥†·¥á Äs…™·¥è…¥:** `{y()}`
** ü…™ ô Ä·¥Ä Ä è ·¥†·¥á Äs…™·¥è…¥:** `{telever}`
**·¥õ·¥á ü·¥á·¥õ ú·¥è…¥ ·¥†·¥á Äs…™·¥è…¥:** `{tlhver}`
**·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç ·¥†·¥á Äs…™·¥è…¥:** `{pyrover}`
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
""",reply_markup=x,
                parse_mode=ParseMode.MARKDOWN,
            )
        except Unauthorized:
            LOGGER.warning(
                f"Bot isn't able to send message to @{SUPPORT_CHAT}, go and check!"
            )
        except BadRequest as e:
            LOGGER.warning(e.message)
    start_handler = CommandHandler("start", start, run_async=True)

    help_handler = CommandHandler("help", get_help, run_async=True)
    help_callback_handler = CallbackQueryHandler(
        help_button, pattern=r"help_.*", run_async=True
    )

    settings_handler = CommandHandler("settings", get_settings, run_async=True)
    settings_callback_handler = CallbackQueryHandler(
        settings_button, pattern=r"stngs_", run_async=True
    )

    about_callback_handler = CallbackQueryHandler(
        Champu_about_callback, pattern=r"Champu_", run_async=True
    )
    music_callback_handler = CallbackQueryHandler(
        Music_about_callback, pattern=r"Music_",run_async=True
    )
    ChampuRobot_main_handler = CallbackQueryHandler(
        ChampuRobot_Main_Callback, pattern=r".*_help",run_async=True)
    donate_handler = CommandHandler("donate", donate)
    migrate_handler = MessageHandler(Filters.status_update.migrate, migrate_chats)
    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(about_callback_handler)
    dispatcher.add_handler(music_callback_handler)
    dispatcher.add_handler(settings_handler)
    dispatcher.add_handler(help_callback_handler)
    dispatcher.add_handler(settings_callback_handler)
    dispatcher.add_handler(migrate_handler)
    dispatcher.add_handler(donate_handler)
    dispatcher.add_handler(ChampuRobot_main_handler)
    dispatcher.add_error_handler(error_callback)
    LOGGER.info("Using long polling.")
    updater.start_polling(timeout=15, read_latency=4, drop_pending_updates=True)

    if len(argv) not in (1, 3, 4):
        telethn.disconnect()
    else:
        telethn.run_until_disconnected()

    updater.idle()


if __name__ == "__main__":
    LOGGER.info("Successfully loaded modules: " + str(ALL_MODULES))
    telethn.start(bot_token=TOKEN)
    app.start()
    main()
